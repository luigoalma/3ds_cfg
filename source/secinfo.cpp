#include <cstddef>
extern "C" {
	#include <3ds/errf.h>
	#include <3ds/fs.h>
	#include <3ds/os.h>
	#include <3ds/ps.h>
	#include <3ds/result.h>
	#include <3ds/types.h>
}
#include <err.h>
#include "storage.cpp"

#define SECINFOSIZE 273

union SecInfoData_T {
	u8 Raw[SECINFOSIZE];
	struct {
		u8 Signature[256];
		union {
			struct {
				u8 Region;
				u8 Byte0x101;
				char Serial[15];
			};
			u8 SignedData[SECINFOSIZE-256];
		};
	};
};

static_assert(sizeof(SecInfoData_T) == SECINFOSIZE);
static_assert(offsetof(SecInfoData_T, SignedData) == 256);
static_assert(offsetof(SecInfoData_T, Region) == 256);
static_assert(offsetof(SecInfoData_T, Byte0x101) == 257);
static_assert(offsetof(SecInfoData_T, Serial) == 258);
static_assert(alignof(SecInfoData_T) == 1);

static const FS_Path[2] SecInfoPaths = {
	{PATH_ASCII, 18, "/sys/SecureInfo_A"},
	{PATH_ASCII, 18, "/sys/SecureInfo_B"}
};

static const FS_Path[2] SecInfoInvalidPaths = {
	{PATH_ASCII, 26, "/sys/SecureInfo_A_invalid"},
	{PATH_ASCII, 26, "/sys/SecureInfo_B_invalid"}
};

static const FS_Path SecInfoOverride = {PATH_ASCII, 18, "/sys/SecureInfo_C"};
static const FS_Path SecInfoOverrideTemp = {PATH_ASCII, 23, "/sys/SecureInfo_C_temp"};

static const PS_RSA_Context SecInfoRsa[2] = {
	// Retail
	(PS_RSA_Context){
		.mod = {
			0xB1, 0x79, 0x1A, 0x6D, 0x1E, 0xAD, 0xD4, 0x29, 0xBA, 0x89, 0xA1, 0xCD, 0x43, 0x36, 0x30, 0x17,
			0x4B, 0xC6, 0x87, 0x30, 0xC5, 0xE7, 0x05, 0x60, 0x19, 0x7B, 0x50, 0xD8, 0xC4, 0x54, 0x67, 0x10,
			0xA6, 0xE8, 0xA1, 0x01, 0xBC, 0x2C, 0xEB, 0x03, 0x76, 0xF0, 0x05, 0xC7, 0x0C, 0xE0, 0xB6, 0xD6,
			0xDF, 0xFD, 0x26, 0xDF, 0x33, 0x46, 0x8B, 0xDB, 0xB2, 0x39, 0x1E, 0x7E, 0xC0, 0x1A, 0xA1, 0xA5,
			0xA0, 0x91, 0xE8, 0x07, 0xDA, 0x37, 0x86, 0x76, 0xBA, 0x39, 0x0A, 0x25, 0x42, 0x9D, 0x59, 0x61,
			0xE1, 0x61, 0xD4, 0x04, 0x85, 0xA7, 0x4B, 0xB2, 0x01, 0x86, 0xBE, 0xB1, 0x1A, 0x35, 0x72, 0xC1,
			0xC2, 0xEA, 0x28, 0xAB, 0x7A, 0x10, 0x15, 0x32, 0x5C, 0x9E, 0x71, 0x2B, 0x7D, 0xF9, 0x65, 0xEA,
			0xE6, 0xC6, 0xFB, 0x8B, 0xAE, 0xD7, 0x6C, 0x2A, 0x94, 0xA6, 0xC5, 0xEC, 0xE4, 0x0E, 0xAF, 0x98,
			0x7E, 0x06, 0xF2, 0x0F, 0x88, 0x4F, 0xD2, 0x06, 0x35, 0xA4, 0x76, 0xE9, 0xF7, 0x0A, 0xBA, 0x5C,
			0x5B, 0x14, 0x61, 0x52, 0x00, 0x54, 0x04, 0x45, 0x93, 0xE4, 0x68, 0x27, 0x04, 0x35, 0x35, 0x5A,
			0xAD, 0x58, 0x09, 0xD1, 0x19, 0x3F, 0x5A, 0x07, 0x28, 0xD6, 0xDB, 0x6B, 0x55, 0x1F, 0x77, 0x94,
			0x5D, 0xC3, 0xBE, 0x6F, 0xAE, 0x5B, 0xCC, 0x08, 0x63, 0xE4, 0x76, 0xDF, 0xA2, 0x9B, 0x36, 0xEA,
			0x85, 0x34, 0x03, 0xE6, 0x16, 0xEA, 0xA9, 0x05, 0xE0, 0x7F, 0x3A, 0x3E, 0x7E, 0x70, 0x77, 0xCF,
			0x16, 0x6A, 0x61, 0xD1, 0x7E, 0x4D, 0x35, 0x4C, 0x74, 0x44, 0x85, 0xD4, 0xF6, 0x7B, 0x0E, 0xEE,
			0x32, 0xF1, 0xC2, 0xD5, 0x79, 0x02, 0x48, 0xE9, 0x62, 0x1A, 0x33, 0xBA, 0xA3, 0x9B, 0x02, 0xB0,
			0x22, 0x94, 0x05, 0x7F, 0xF6, 0xB4, 0x38, 0x88, 0xE3, 0x01, 0xE5, 0x5A, 0x23, 0x7C, 0x9C, 0x0B
		},
		.small_exp = 0x10001,
		.rsa_bit_size = 2048,
		.is_full_exponent = 0,
		.padding = {0, 0, 0}
	},
	// Dev
	(PS_RSA_Context){
		.mod = {
			0xB1, 0xAA, 0x6C, 0x55, 0x3C, 0xA8, 0x4D, 0x83, 0x3C, 0x2E, 0x97, 0x56, 0xB5, 0x2B, 0xD3, 0x70,
			0x1D, 0x0F, 0xD4, 0xD1, 0xEE, 0xF1, 0x71, 0xF4, 0xFD, 0x95, 0x96, 0x1D, 0x52, 0xBF, 0x75, 0x63,
			0xB8, 0x9D, 0x2F, 0xF5, 0xF8, 0x15, 0xE4, 0x0A, 0x76, 0xE2, 0x0F, 0x55, 0x11, 0x63, 0xE9, 0xE9,
			0x85, 0x68, 0x41, 0x5A, 0x28, 0x31, 0x22, 0xE1, 0x99, 0xDE, 0xEC, 0x77, 0x17, 0x12, 0xC6, 0x78,
			0xDA, 0x0B, 0xB4, 0xDD, 0x50, 0xF3, 0x0C, 0x61, 0x5F, 0xA5, 0x7D, 0xEA, 0x74, 0xD7, 0x1D, 0x11,
			0x87, 0xBF, 0xEB, 0xC3, 0x33, 0xD7, 0x35, 0x0E, 0xDD, 0x45, 0x98, 0x1B, 0xEF, 0x6F, 0xB9, 0x73,
			0xE8, 0x35, 0x9C, 0xE5, 0xB0, 0xC8, 0xFF, 0x5C, 0x42, 0x9B, 0xA7, 0x90, 0xAE, 0xF9, 0xB7, 0x62,
			0x56, 0x04, 0xB1, 0xB0, 0xB2, 0x44, 0xD6, 0x86, 0x34, 0xE6, 0x2F, 0x79, 0x4D, 0x9C, 0xAF, 0xB5,
			0x9A, 0x3B, 0xFA, 0xC8, 0x81, 0x03, 0x96, 0x6F, 0x9B, 0xDC, 0x87, 0x8B, 0x32, 0x3C, 0x37, 0xEB,
			0xCD, 0x21, 0xC8, 0xB9, 0x27, 0x6F, 0xFC, 0xC8, 0x47, 0x02, 0xFF, 0x87, 0xD1, 0xD0, 0x2F, 0x64,
			0xD4, 0x36, 0xD4, 0x85, 0x01, 0xAD, 0x70, 0xF3, 0xA2, 0xB1, 0x0D, 0x13, 0xEF, 0x55, 0x94, 0xA0,
			0x23, 0x81, 0x71, 0xF9, 0x4A, 0xD2, 0x01, 0x58, 0x90, 0x60, 0x13, 0xFB, 0x6D, 0xB6, 0x18, 0x38,
			0x31, 0xDF, 0x11, 0x44, 0xB5, 0x96, 0x49, 0xA3, 0x53, 0x08, 0xB2, 0x64, 0xC1, 0xEF, 0x11, 0x9E,
			0x1D, 0x17, 0x17, 0x9A, 0x87, 0x44, 0x17, 0x3A, 0x73, 0xA2, 0xF7, 0xD9, 0x96, 0x1A, 0x79, 0xE1,
			0xF9, 0x86, 0x6E, 0xEE, 0x6F, 0xBB, 0xD2, 0xDC, 0xCF, 0x3B, 0x0D, 0xC4, 0xE2, 0x76, 0xD1, 0xD0,
			0xC0, 0x37, 0x98, 0xBE, 0xC1, 0xBC, 0xD9, 0x64, 0x6F, 0xC4, 0xCB, 0x46, 0xBB, 0x5F, 0xF5, 0x55
		},
		.small_exp = 0x10001,
		.rsa_bit_size = 2048,
		.is_full_exponent = 0,
		.padding = {0, 0, 0}
	}
};

struct ManagedSecInfo_T {
	ManagedSignedFile_T<SecInfoData_T,SecInfoPaths,SecInfoInvalidPaths,2,&SecInfoOverride,&SecInfoOverrideTemp,SecInfoRsa> Manager;

	Result GetSignature(void* sig);
	Result GetRegionByte(u8* region);
	Result GetByte0x101(u8* unk);
	Result GetSerialNumber(char* serial);
	Result GetData(void* data);

	Result SetWholeSecInfo(const void* sig, const void* data);
};

inline Result ManagedSecInfo_T::GetSignature(void* sig) {
	if(!Manager.IsInit)
		return CFG_NOT_INITIALIZED;

	memcpy(sig, Manager.Data.Signature, sizeof(Manager.Data.Signature));

	return 0;
}

inline Result ManagedSecInfo_T::GetRegionByte(u8* region) {
	if(!Manager.IsInit)
		return CFG_NOT_INITIALIZED;

	if(!Manager.WasChecked) {
		Manager.CheckSignature();
		Manager.WasChecked = true;
	}

	if(!Manager.IsSigned)
		return CFG_BAD_SIGNATURE;

	*region = Manager.Data.Region;

	return 0;
}

inline Result ManagedSecInfo_T::GetByte0x101(u8* unk) {
	if(!Manager.IsInit)
		return CFG_NOT_INITIALIZED;

	if(!Manager.WasChecked) {
		Manager.CheckSignature();
		Manager.WasChecked = true;
	}

	if(!Manager.IsSigned)
		return CFG_BAD_SIGNATURE;

	*unk = Manager.Data.Byte0x101;

	return 0;
}

inline Result ManagedSecInfo_T::GetSerialNumber(char* serial) {
	if(!Manager.IsInit)
		return CFG_NOT_INITIALIZED;

	if(!Manager.WasChecked) {
		Manager.CheckSignature();
		Manager.WasChecked = true;
	}

	if(!Manager.IsSigned)
		return CFG_BAD_SIGNATURE;

	memcpy(serial, Manager.Data.Serial, sizeof(Manager.Data.Serial));

	return 0;
}

inline Result ManagedSecInfo_T::GetData(void* data) {
	if(!Manager.IsInit)
		return CFG_NOT_INITIALIZED;

	memcpy(data, Manager.Data.SignedData, sizeof(Manager.Data.SignedData));

	return 0;
}

inline Result ManagedSecInfo_T::SetWholeSecInfo(const void* sig, const void* data) {
	if(!Manager.IsInit)
		return CFG_NOT_INITIALIZED;

	memcpy(Manager.Data.Signature,  sig,  sizeof(Manager.Data.Signature));
	memcpy(Manager.Data.SignedData, data, sizeof(Manager.Data.SignedData));

	return 0;
}

ManagedSecInfo_T ManagedSecInfoFile = {
	.Manager = (ManagedSignedFile_T<SecInfoData_T,SecInfoPaths,SecInfoInvalidPaths,2,&SecInfoOverride,&SecInfoOverrideTemp,SecInfoRsa>){
		.Data = (SecInfoData_T){},
		.IsInit = false,
		.IsSigned = false,
		.WasChecked = false,
		.Overriden = false,
		.Index = -1
	}
};

extern "C" void Cfg_SecInfo_Init() {
	ManagedSecInfoFile.Manager.Init();
}

extern "C" void Cfg_SecInfo_SaveToNextSlot() {
	ManagedSecInfoFile.Manager.SaveToNextSlot();
}

extern "C" Result Cfg_SecInfo_CheckSignature() {
	return ManagedSecInfoFile.Manager.CheckSignature();
}

extern "C" Result Cfg_SecInfo_GetSignature(void* sig, size_t size) {
	if(size < sizeof(Manager.Data.Signature)) // size checks were not originally done
		return CFG_INVALID_SIZE;

	return ManagedSecInfoFile.GetSignature(sig);
}

extern "C" Result Cfg_SecInfo_GetRegionByte(u8* region) {
	return ManagedSecInfoFile.GetRegionByte(region);
}

extern "C" Result Cfg_SecInfo_GetByte0x101(u8* unk) {
	return ManagedSecInfoFile.GetByte0x101(unk);
}

extern "C" Result Cfg_SecInfo_GetSerialNumber(char* serial, size_t size) {
	if(size < sizeof(Manager.Data.Serial)) // size checks were not originally done
		return CFG_INVALID_SIZE;

	return ManagedSecInfoFile.GetSerialNumber(serial);
}

extern "C" Result Cfg_SecInfo_GetData(void* data, size_t size) {
	if(size < sizeof(Manager.Data.SignedData)) // size checks were not originally done
		return CFG_INVALID_SIZE;

	return ManagedSecInfoFile.GetData(data);
}

extern "C" Result Cfg_SecInfo_SetWholeSecInfo(const void* sig, size_t sigsize, const void* data, size_t datasize) {
	if(sigsize < sizeof(Manager.Data.Signature) || datasize < sizeof(Manager.Data.SignedData)) // size checks were not originally done
		return CFG_INVALID_SIZE;

	return ManagedSecInfoFile.SetWholeSecInfo(sig, data);
}
